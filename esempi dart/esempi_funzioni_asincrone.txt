###########################################
Esempio funzioni asincrone: versione 1

String createOrderMessage() {
	var order = fetchUserOrder();
	return "Your order is: $order";
}

Future<String> fetchUserOrder() =>
	Future.delayed(Duration(seconds: 1), () => "Cappuccino");


void main(){
print(createOrderMessage());
}


###########################################
Esempio funzioni asincrone: versione 2

String createOrderMessage() async {
	var order = await fetchUserOrder();
	return "Your order is: $order";
}

Future<String> fetchUserOrder() =>
	Future.delayed(Duration(seconds: 1), () => "Cappuccino");


void main(){
print(createOrderMessage());
}

###########################################
Esempio funzioni asincrone: versione 3

String createOrderMessage() async {
	print("Ciao");  // esegue immediatamente!!
	var order = await fetchUserOrder();
	return "Your order is: $order";
}

Future<String> fetchUserOrder() =>
	Future.delayed(Duration(seconds: 1), () => "Cappuccino");


void main() async{
print(await createOrderMessage());
}

###########################################
Esempio funzioni asincrone: esempio con contatore

Future<void> printOrderMessage() async {
	print("Awaiting your order...");
	var order = await fetchUserOrder();
	print("Your order is: $order");
}

Future<String> fetchUserOrder() =>
	Future.delayed(Duration(seconds: 4), () => "Caff√®");


void countSeconds(int s){
	for(var i = 1; i<=s; i++){
		Future.delayed(Duration(seconds: i), () => print(i));
	}
}

void main() async{
	countSeconds(10);
	await printOrderMessage();
}

